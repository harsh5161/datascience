Testing lending.csv

#### RUNNING WAIT ####
extension is csv
We have a csv file
This file has 26 columns and 30 rows

DataFrame Succesfully imported

Index(['_target_is_bad', '_id_member_id', 'loan_status', 'emp_title',
       'emp_length', 'home_ownership', 'annual_inc', 'pymnt_plan', 'desc',
       'zip_code', 'addr_state', 'dti', 'delinq_2yrs', 'earliest_cr_line',
       'inq_last_6mths', 'mths_since_last_delinq', 'mths_since_last_record',
       'open_acc', 'pub_rec', 'revol_util', 'total_acc', 'initial_list_status',
       'collections_12_mths_ex_med', 'mths_since_last_major_derog',
       'revol_util_percent', 'policy_code'],
      dtype='object')
#### RUNNING WAIT ####
extension is csv
We have a csv file
This file has 26 columns and 10000 rows
###Performing Initial Numeric Engineering for Capping Purposes###
		 stripping spaces, symbols, and lower casing all entries
done ...
		 Replacing empty and invalid strings
done ...
		 Replacing commas if present in Currencies
done ...
		 Finding Numeric Columns
done ...
		   _target_is_bad is of type object
		   _id_member_id is of type object
		   loan_status is of type object
		   emp_title is of type object
		   emp_length is of type object
		   home_ownership is of type object
		   annual_inc is of type float64
		   pymnt_plan is of type object
		   desc is of type object
		   zip_code is of type object
		   addr_state is of type object
		   dti is of type float64
		   delinq_2yrs is of type float64
		   earliest_cr_line is of type object
		   inq_last_6mths is of type float64
		   mths_since_last_delinq is of type float64
		   mths_since_last_record is of type float64
		   open_acc is of type float64
		   pub_rec is of type float64
		   revol_util is of type float64
		   total_acc is of type float64
		   initial_list_status is of type bool
		   collections_12_mths_ex_med is of type float64
		   mths_since_last_major_derog is of type float64
		   revol_util_percent is of type float64
		   policy_code is of type int64
Numeric Engineering time taken: 0.07812070846557617



### TARGET ANALYSIS ENTERED ###
Target has 2 unique values
Printing % occurence of each class in target Column
no     0.868
yes    0.132
Name: _target_is_bad, dtype: float64
Dataset has not been capped
Length of the dataset is same as original 10000
Length of the dataframe is 10000
                             Missing in %
mths_since_last_major_derog        100.00
mths_since_last_record              91.60
mths_since_last_delinq              63.16
desc                                32.30
emp_title                            5.92
emp_length                           2.59
collections_12_mths_ex_med           0.32
revol_util_percent                   0.26
revol_util                           0.26
inq_last_6mths                       0.05

 ### Entering Numeric Engineering of Target### 

		 stripping spaces, symbols, and lower casing all entries
done ...
		 Replacing empty and invalid strings
done ...
		 Replacing commas if present in Currencies
done ...
		 Finding Numeric Columns
done ...
		   loan_status is of type object
		   emp_title is of type object
		   emp_length is of type object
		   home_ownership is of type object
		   annual_inc is of type float64
		   pymnt_plan is of type object
		   desc is of type object
		   zip_code is of type object
		   addr_state is of type object
		   dti is of type float64
		   delinq_2yrs is of type float64
		   earliest_cr_line is of type object
		   inq_last_6mths is of type float64
		   mths_since_last_delinq is of type float64
		   mths_since_last_record is of type float64
		   open_acc is of type float64
		   pub_rec is of type float64
		   revol_util is of type float64
		   total_acc is of type float64
		   initial_list_status is of type bool
		   collections_12_mths_ex_med is of type float64
		   mths_since_last_major_derog is of type float64
		   revol_util_percent is of type float64
		   policy_code is of type int64
		   _target_is_bad is of type object
Numeric Engineering time taken: 0.4531276226043701



### TARGET ANALYSIS ENTERED ###
Target has 2 unique values
Printing % occurence of each class in target Column
no     0.8705
yes    0.1295
Name: _target_is_bad, dtype: float64

Target has 2 Levels! No classes will be removed
_target_is_bad column needs Classification

 0 rows were removed since target had these missing

Removing Rows and Columns with more than 50% missing

Rows are getting dropped first then rows
The columns getting dropped are ['mths_since_last_major_derog', 'mths_since_last_delinq', 'mths_since_last_record']
Shape of the dataframe: (7999, 21)
Shape of the target column (7999,)
After removal of highly missing rows and columns
                            Missing in %
desc                               32.34
emp_title                           5.70
emp_length                          2.50
collections_12_mths_ex_med          0.34
revol_util                          0.26
revol_util_percent                  0.26
delinq_2yrs                         0.05
total_acc                           0.05
pub_rec                             0.05
open_acc                            0.05
Shape of X_train is (7999, 21)
Shape of y_train is (7999,)
printing target variable distribution for classification:

0    0.870484
1    0.129516
Name: _target_is_bad, dtype: float64

#### DATE ENGINEERING RUNNING WAIT ####
Date Columns found are ['earliest_cr_line']
Respective columns will undergo date engineering and will be imputed in the function itself

#### DATE ENGINEERING RUNNING WAIT ####

	 Entering Date Engineering

Printing Missing % of date columns
                  Missing in %
earliest_cr_line          0.05
Dropping Columns with missing greater than 35% of total number of entries

	 #### RUNNING WAIT ####

Visualizing Coloumns Generated
 {'earliest_cr_line': ['earliest_cr_line_month', 'earliest_cr_line_year', 'earliest_cr_line-today', 'earliest_cr_line_nearestHoliday']}

The Following columns were generated to get days between dates of two seperate date columns
 []

Date Engineering Time Taken : 1.1562492847442627

	 #### DONE ####
(7999, 4)
 #### DONE ####

 ### Entering Segregation Zone ### 


#### Entering Segregation ####

There are 8 pure numeric columns
There are 4 categorical numeric columns

The pure numeric columns are Index(['annual_inc', 'dti', 'delinq_2yrs', 'inq_last_6mths', 'open_acc',
       'revol_util', 'total_acc', 'revol_util_percent'],
      dtype='object')
The categorical numeric columns are Index(['collections_12_mths_ex_med', 'policy_code', 'initial_list_status',
       'pub_rec'],
      dtype='object')

We found 8 obj type columns!
Printing Cardinality info of All Object Type Columns!

emp_length          12
home_ownership       4
pymnt_plan           2
addr_state          50
zip_code           700
emp_title         6449
desc              5372
loan_status          6
dtype: int64


emp_length has top 5 levels that contribute to more than 10% of data!
emp_length has 12 levels before grouping
emp_length is a discrete column!

home_ownership has top 5 levels that contribute to more than 10% of data!
home_ownership has 4 levels before grouping
home_ownership is a discrete column!

pymnt_plan has top 5 levels that contribute to more than 10% of data!
pymnt_plan has 2 levels before grouping
pymnt_plan is a discrete column!

addr_state has top 5 levels that contribute to more than 10% of data!
addr_state has 50 levels before grouping
addr_state is a discrete column!

zip_code has top 5 levels that contribute to less than 10% of data!
zip_code is unique

emp_title has top 5 levels that contribute to less than 10% of data!
emp_title is unique

desc has top 5 levels that contribute to more than 10% of data!
desc has 5372 levels before grouping
Attempting grouping of minor levels of desc as the column has more than 60 levels
desc contains 5371 categories that is/are less than 0.5 percent
desc has 2 levels after grouping

loan_status has top 5 levels that contribute to more than 10% of data!
loan_status has 6 levels before grouping
loan_status is a discrete column!


We found 2 unique columns!


The unique columns are ['zip_code', 'emp_title']

We now have 6 obj type discrete columns!

Printing Cardinality info of obj Discrete Columns!

emp_length        12
home_ownership     4
pymnt_plan         2
addr_state        50
desc               2
loan_status        6
dtype: int64
checking Initial Presence of Missing Per Column annual_inc                    False
dti                           False
delinq_2yrs                    True
inq_last_6mths                 True
open_acc                       True
revol_util                     True
total_acc                      True
revol_util_percent             True
collections_12_mths_ex_med    False
policy_code                   False
initial_list_status           False
pub_rec                       False
emp_length                    False
home_ownership                False
pymnt_plan                    False
addr_state                    False
desc                          False
loan_status                   False
dtype: bool

### TARGET ANALYSIS ENTERED ###
Target has 2 unique values
Printing % occurence of each class in target Column
0    0.870484
1    0.129516
Name: _target_is_bad, dtype: float64
Iteration: 0
Checking Final Presence of Missing Per Column annual_inc                    False
dti                           False
delinq_2yrs                   False
inq_last_6mths                False
open_acc                      False
revol_util                    False
total_acc                     False
revol_util_percent            False
collections_12_mths_ex_med    False
policy_code                   False
initial_list_status           False
pub_rec                       False
emp_length                    False
home_ownership                False
pymnt_plan                    False
addr_state                    False
desc                          False
loan_status                   False
dtype: bool
!!!---!!!

Printing Cardinality info of all Discrete Columns! That is categorical numerical + obj type discrete!

collections_12_mths_ex_med     1
policy_code                    1
initial_list_status            1
pub_rec                        4
emp_length                    12
home_ownership                 4
pymnt_plan                     2
addr_state                    50
desc                           2
loan_status                    6
dtype: int64

Segregation time taken : 3.593744993209839
Segregation Done!

#### OUTLIER WINSORIZING ####
 #### DONE ####
zip_code count of words is 141 - 0 - 0 - 0 -
dropping column zip_code
emp_title count of words is 21 - 40 - 50 - 20 -
dropping column emp_title
(141, 0)
Time taken to tokenize the DataFrame 0.7499911785125732
Columns that are going to be removed are  ['zip_code', 'emp_title']
Time taken for completion of excess column removal: 0.0
No Remarks or Comments Found 
Extracting Review Columns time 0.7656159400939941
No review/comment columns found
total text analytics time taken = 0.7656159400939941
Text Engineering Result Empty DataFrame
Columns: []
Index: []

 #### PEARSON CORRELATION ####

1 columns removed which were highly correlated
The columns removed are ['revol_util_percent']
 #### DONE ####
num_df - (7999, 7)
disc_df - (7999, 10)
DATE_DF - (7999, 4)
TEXT_DF - (0, 0)

 #### TRANSFORMATIONS ####

 #### TARGET ENCODING ####
(7999, 21)
(7999,)
Target Encoding Time taken : 0.2656259536743164

 #### FEATURE SELECTION ####
(7999, 21)
runnning classifier selector

Binary Classification


thresh2: 2.588235294117647

The final score sheet of 7 selected columns with importances:

                  col_name  scores2   t/f
0               annual_inc      223  True
1                      dti      121  True
16             loan_status      100  True
5               revol_util       35  True
19  earliest_cr_line-today       22  True
18   earliest_cr_line_year       10  True
14              addr_state        7  True

14 columns are eliminated during Feature Selection which are:
{'earliest_cr_line_Holiday', 'initial_list_status', 'open_acc', 'delinq_2yrs', 'emp_length', 'home_ownership', 'inq_last_6mths', 'pymnt_plan', 'pub_rec', 'total_acc', 'policy_code', 'earliest_cr_line_month', 'desc', 'collections_12_mths_ex_med'}
(7999, 21)
(7999,)
Feature Selection Time taken : 0.9090366363525391
Feature Selection Plot Time taken : 0.21924948692321777
(7999, 7)
(7999,)

 #### DECISION TREE VISUALIZATION ####
Length of X_cart and y_cart 7999 --- 7999
Length of X_cart_res and y_cart_res 13926 --- 13926
addr_state column will now be truncated
The values after truncating the text are as follows
ca    2697
ny    1237
fl    1106
tx     874
nj     724
ga     563
va     547
il     525
pa     474
ma     459
md     385
oh     372
wa     323
az     269
nc     265
ct     264
mi     238
co     232
nv     214
mo     213
al     186
sc     165
ky     146
or     140
ok     136
mn     136
wi     125
ut     112
la     111
ks      79
nm      74
ri      69
ar      63
wv      60
ak      50
nh      49
de      45
dc      43
hi      37
vt      25
mt      25
wy      16
ms      14
sd      14
tn      11
ne       8
in       2
ia       2
me       1
id       1
Name: addr_state, dtype: int64
loan_status column will now be truncated
The values after truncating the text are as follows
charge...    6941
fully ...    6526
curren...     430
late (...      22
in gra...       7
Name: loan_status, dtype: int64
name 'localconverter' is not defined
#### CART VISUALIZATION DID NOT RUN AND HAD ERRORS ####
DISCRETE COLUMNS ARE:      collections_12_mths_ex_med policy_code initial_list_status pub_rec  \
0                           0.0           1               False     0.0   
1                           0.0           1               False     0.0   
2                           0.0           1               False     0.0   
3                           0.0           1               False     0.0   
4                           0.0           1               False     0.0   
...                         ...         ...                 ...     ...   
7994                        0.0           1               False     0.0   
7995                        0.0           1               False     0.0   
7996                        0.0           1               False     1.0   
7997                        0.0           1               False     0.0   
7998                        0.0           1               False     0.0   

     emp_length home_ownership pymnt_plan addr_state     desc  loan_status  
0       4 years           rent          n         ny  missing   fully paid  
1       missing       mortgage          n         ny   others   fully paid  
2        1 year       mortgage          n         md   others  charged off  
3      < 1 year           rent          n         ct   others   fully paid  
4       9 years       mortgage          n         or  missing   fully paid  
...         ...            ...        ...        ...      ...          ...  
7994    3 years           rent          n         ca   others   fully paid  
7995    5 years           rent          n         il  missing   fully paid  
7996     1 year           rent          n         ct  missing   fully paid  
7997    7 years       mortgage          n         la   others   fully paid  
7998    6 years       mortgage          n         co   others   fully paid  

[7999 rows x 10 columns]
DISCRETE COLUMNS ARE!!!!!!!: ['addr_state', 'loan_status']
Categorical Columns considered:

Index(['addr_state', 'loan_status'], dtype='object')
Non-Categorical Columns considered:

Index(['annual_inc', 'dti', 'revol_util', 'earliest_cr_line_year',
       'earliest_cr_line-today'],
      dtype='object')
value=[n1,n2,n3...] where n1,n2,n3 are the number of samples of the classes in the order     
value=['no' 'yes']
['no', 'yes']
(7999, 7)
(7999,)

 #### NORMALIZATION ####
 #### DONE ####
(7999, 7)
(7999,)

 #### POWER TRANSFORMATIONS ####
 #### DONE ####
(7999, 7)
(7999,)

 #### Printing Sample Equation of the DATA ####
LABEL ENCODED FOR SAMPLE EQUATION


LOGISTIC REGRESSION EQUATION:


ln(odds) = 2.2820906939920494e-06*annual_inc + 0.024903025350252274*dti + 0.006982754993723355*revol_util + 0.0018468302910814383*earliest_cr_line_year + -2.2754093609279663e-05*earliest_cr_line-today + -0.0036025554741403376*addr_state + -5.2984693851226465*loan_status + -4.572917650832141e-05

=> odds = exp ( 2.2820906939920494e-06*annual_inc + 0.024903025350252274*dti + 0.006982754993723355*revol_util + 0.0018468302910814383*earliest_cr_line_year + -2.2754093609279663e-05*earliest_cr_line-today + -0.0036025554741403376*addr_state + -5.2984693851226465*loan_status + -4.572917650832141e-05 )

Where, odds = P(class=yes) / 1 - P(class=yes) 

In simple terms Odds of an event happening is defined as the likelihood that an event will occur, expressed as a proportion of the likelihood that the event will not occur. For example - the odds of rolling four on a dice are 1/6 or 16.67%.

Estimated f1 score =  99.95%
(F1 score is the harmonic mean of precision and recall, it tells how good the model is at predicting correctly and avoiding false predictions. Simply put, it is approximate accuracy.)

Where the columns are encoded like this:

+--------------+----------------------+
| addr_state   |   addr_state encoded |
|--------------+----------------------|
| ak           |                    0 |
| al           |                    1 |
| ar           |                    2 |
| az           |                    3 |
| ca           |                    4 |
| co           |                    5 |
| ct           |                    6 |
| dc           |                    7 |
| de           |                    8 |
| fl           |                    9 |
| ga           |                   10 |
| hi           |                   11 |
| ia           |                   12 |
| id           |                   13 |
| il           |                   14 |
| in           |                   15 |
| ks           |                   16 |
| ky           |                   17 |
| la           |                   18 |
| ma           |                   19 |
| md           |                   20 |
| me           |                   21 |
| mi           |                   22 |
| mn           |                   23 |
| mo           |                   24 |
| ms           |                   25 |
| mt           |                   26 |
| nc           |                   27 |
| ne           |                   28 |
| nh           |                   29 |
| nj           |                   30 |
| nm           |                   31 |
| nv           |                   32 |
| ny           |                   33 |
| oh           |                   34 |
| ok           |                   35 |
| or           |                   36 |
| pa           |                   37 |
| ri           |                   38 |
| sc           |                   39 |
| sd           |                   40 |
| tn           |                   41 |
| tx           |                   42 |
| ut           |                   43 |
| va           |                   44 |
| vt           |                   45 |
| wa           |                   46 |
| wi           |                   47 |
| wv           |                   48 |
| wy           |                   49 |
+--------------+----------------------+
+--------------------+-----------------------+
| loan_status        |   loan_status encoded |
|--------------------+-----------------------|
| charged off        |                     0 |
| current            |                     1 |
| fully paid         |                     2 |
| in grace period    |                     3 |
| late (16-30 days)  |                     4 |
| late (31-120 days) |                     5 |
+--------------------+-----------------------+
 #### DONE ####

This is final shape of X_train : (7999, 7)
This is final shape of Y_train : (7999,)


 #### SAVING INIT INFORMATION ####
 #### DONE ####

 TOTAL TRAINING DATA CLEANING AND PLOTS : 8.783713102340698

	 #### VALIDATION AND SCORING ZONE ####
Value of Key from Training is:  _id_member_id
Total no. of null values present in the Key:  _id_member_id    0
_id_member_id    0
dtype: int64
NUll values after removal are:  _id_member_id    0
_id_member_id    0
dtype: int64
'DataFrame' object has no attribute 'dtype'



